#!/usr/bin/env python

'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

# Solution 1
def fibs_below(n):
  results = []
  a, b = 1, 2

  while a < n:
    results.append(a)
    a, b = b, a + b

  return results

print sum(fib for fib in fibs_below(4000000) if fib % 2 == 0)

# Solution 2
def fibs_below(n, a = 1, b = 2):
  return [] if a > n else [a] + fibs_below(n, b, a + b)

even = lambda x: x % 2 == 0

print sum(filter(even, fibs_below(4000000)))

# Solution 3
def fibs_below(n, a = 1, b = 2):
  return [] if a > n else [a] + fibs_below(n, b, a + b)

def drop(n, list):
  return list[n:]

original_fibs = drop(1, fibs_below(4000000))

result = []
while original_fibs:
  result.append(original_fibs[0])
  original_fibs = drop(3, original_fibs)

print sum(result)
